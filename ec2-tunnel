#!/usr/bin/env ruby

# ==========
# EC2 Tunnel
# ==========
#
# Important Notes
# ===============
#
# This script will overwrite your openvpn.conf file!
#
#
# Getting Started
# ===============
#
# To set this up:
#
# 1. Run:
#  ec2-authorize default -p 22
#  ec2-authorize default -p 1194 -P udp
#
# 2. Install:
#  sudo gem install amazon-ec2 net-ssh
#
# 3. Change the constants immediately below as appropriate for your setup:
#
#
# Credits
# =======
#
# Based on manual procedure at http://gist.github.com/3997
# EC2 gem usage based on http://fushizen.net/~bd/ec2-backup-scrubbed.rb.txt

# Useful configuration
KEYPAIR = "ec2-key"
IMAGE_ID = "ami-5647a33f" # ec2-public-images/fedora-8-i386-base-v1.08.manifest.xml
KEYS = [File.expand_path("~/.ec2/id_rsa-" + KEYPAIR)]

AWS_NAMESERVER = "172.16.0.23"

# Esoteric VPN configuration
OPENVPN_CONF = File.expand_path("~/Library/openvpn/openvpn.conf")
VPN_DEV = "tun"
VPN_PROTO = "udp"
VPN_PORT = "1194"
VPN_IFCONFIG_LIST = ["10.4.0.2", "10.4.0.1"]
VPN_REDIRECT_GATEWAY = "def1"


require 'tempfile'
require 'EC2'
require 'net/ssh'

def wait_forever()
  while true
    sleep 5
  end
end

def fancy_sleep(seconds)
  (1..seconds).each { |i| 
    sleep 1
    print "."
    $stdout.flush
  }
end

# Preflight checks
begin
  File.open(OPENVPN_CONF, 'w') {|f| }
rescue e
  puts("OpenVPN configuration file not accessible at #{OPENVPN_CONF}:\r\n$!")
  exit 1
end

# Connect to EC2
puts("[*] Connecting to EC2")
access_key_id = ENV['AMAZON_ACCESS_KEY_ID']
secret_access_key = ENV['AMAZON_SECRET_ACCESS_KEY']
ec2 = EC2::Base.new(:access_key_id => access_key_id, :secret_access_key => secret_access_key)

# Start the instance
puts("[*] Starting instance of image #{IMAGE_ID}")
response = ec2.run_instances(:image_id => IMAGE_ID, :min_count => 1, :max_count => 1, :key_name => KEYPAIR)
instance_id = response.instancesSet.item[0].instanceId

# Make sure that we kill the instance when the script gets killed
at_exit {
  puts("[*] Terminating instance #{instance_id}")
  (1..5).each { |i| 
    ec2.terminate_instances(:instance_id => [instance_id])
    sleep 1
  }
}

# Wait for the instance to come up
puts("[*] Waiting for instance")
instance_state = nil
while true
    fancy_sleep(5)
    response = ec2.describe_instances(:instance_id => [instance_id])
    instance_state = response.reservationSet.item[0].instancesSet.item[0].instanceState.name
    puts " #{instance_id} is #{instance_state}"
    break unless instance_state == "pending"
end

# Check that the instance hasn't failed during startup
if instance_state != "running"
    puts "[*] Unexpected state: #{instance_state}, terminating and aborting"
    exit 1
end

# Retrieve DNS name and wait for SSH to start up
instance_dns_name = response.reservationSet.item[0].instancesSet.item[0].dnsName
puts "[*] Instance up at #{instance_dns_name}, waiting for SSH"
fancy_sleep(30)
puts " attempting to connect"

# Prepare a temporary storage place for the secret key
secret_key_tempfile = Tempfile.new('vpnsecretkey')

# Make sure that we kill the keyfile when the script gets killed
at_exit {
  secret_key_tempfile.close!()
}

# Dial-in to the newly built instance using the private key
puts "[*] Connecting via SSH with keys #{KEYS.join(" ")}"
Net::SSH.start(instance_dns_name, 'root', :keys => KEYS) do |ssh|
  # A helper to execute a command showing it's output on stdout/stderr
  # NB: due to weird-ass Ruby scoping rules I can't use ssh from the enclosing context
  def exec_directly!(ssh, command)
    channel = ssh.open_channel do |ch|
      ch.exec(command) do |ch, success|
        raise "Could not execute command '#{command}'" unless success
        puts("#{command}:")
        
        ch.on_data do |c, data|
          $stdout.print data
        end
        
        ch.on_extended_data do |c, type, data|
          $stderr.print data
        end
      end
    end
    
    channel.wait
  end
  
  puts(" [*] Installing prerequisites")
  exec_directly!(ssh, "yum install -y openvpn")
  exec_directly!(ssh, "yum install -y screen")
  
  # Retrieve secret key and store it locally
  puts(" [*] Generating and retrieving secret key")
  exec_directly!(ssh, "openvpn --genkey --secret ~/secret.key")
  secret_key_tempfile.write("cat ~/secret.key")
  secret_key_tempfile.flush()
  
  # Get new openvpn.conf contents
  new_openvpn_conf_contents = "
  dev #{VPN_DEV}
  proto #{VPN_PROTO}
  port #{VPN_PORT}
  remote #{instance_dns_name}
  ifconfig #{VPN_IFCONFIG_LIST.join(" ")}
  secret #{secret_key_tempfile.path()}
  redirect-gateway #{VPN_REDIRECT_GATEWAY}
  persist-key
  persist-tun
  "

  # Write new conf file
  puts("[*] Setting up local VPN configuration")
  File.open(OPENVPN_CONF, 'w') {|f| f.write(new_openvpn_conf_contents) }

  # Set up the VPN
  puts("[*] Setting up remote VPN configuration")
  exec_directly!(ssh, "modprobe tun")
  exec_directly!(ssh, "modprobe iptable_nat")
  exec_directly!(ssh, "echo 1 > /proc/sys/net/ipv4/ip_forward")
  exec_directly!(ssh, "iptables -t nat -A POSTROUTING -s #{VPN_IFCONFIG_LIST[0]}/2 -o eth0 -j MASQUERADE")
  
  # Start the VPN
  puts(" [*] Starting VPN in background")
  exec_directly!(ssh, "screen -md openvpn --proto #{VPN_PROTO} --port #{VPN_PORT} --dev #{VPN_DEV} --ifconfig #{VPN_IFCONFIG_LIST.join(" ")} --verb 1 --secret ~/secret.key --push 'redirect-gateway #{VPN_REDIRECT_GATEWAY}' --push 'dhcp-option DNS #{AWS_NAMESERVER}'")
end

puts("[*] Finished setup - use your openvpn client to initiate the connection, then disconnect and kill this process when you are done")
wait_forever()