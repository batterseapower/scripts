#!/usr/bin/env python
#

import sys
import os
import glob
import getopt
from itertools import takewhile


def path_as_list(path):
    previous_head = None
    (head, tail) = os.path.split(path)
    path_list = []
    while head != previous_head:
        path_list = [tail] + path_list
        previous_head = head
        (head, tail) = os.path.split(head)
    
    path_list = [head] + path_list
    return path_list

def reversed_list(what):
    the_list = list(what)
    the_list.reverse()
    return the_list

def dropwhile(predicate, iterable):
    dropping = True
    for x in iterable:
        if dropping and predicate(x):
            continue
        else:
            dropping = False
            yield x

def dropsuffixwhile(predicate, iterable):
    return reversed_list(dropwhile(predicate, reversed_list(iterable)))

def takesuffixwhile(predicate, iterable):
    return reversed_list(takewhile(predicate, reversed_list(iterable)))



def usage(program):
    print "Usage:", sys.argv[0], "[--split] core/benchmark [variant-base-name] variant-code"

def main(program, arguments):
    options, args = getopt.getopt(arguments, "", ["split"])
    do_split = len(options) > 0
        
    if len(args) == 2:
        mode = args[0]
        supplied_variant_base_name = None
        variant_code = args[1]
    elif len(args) == 3:
        mode = args[0]
        supplied_variant_base_name = args[1]
        variant_code = args[2]
    else:
        usage(program)
        return 2

    stage = 2
    ghc_opts = '-O -fforce-recomp -c -dverbose-core2core -ddump-stg ' + os.environ.get("EXTRA_HC_OPTS", '')

    current_directory = os.getcwd()
    full_directory_path = path_as_list(current_directory)
    ghc_root = os.path.join(*dropsuffixwhile(lambda x: x != 'nofib', full_directory_path)[0:-1])

    ghc = os.path.join(ghc_root, 'ghc', 'stage' + str(stage) + '-inplace', 'ghc')
    investigation_root, inferred_variant_base_name = os.path.split(ghc_root)

    if supplied_variant_base_name:
        variant_base_name = supplied_variant_base_name
    else:
        variant_base_name = inferred_variant_base_name

    variant = variant_base_name + '-' + variant_code
    print "Variant:", variant, "Stage:", stage, "Options:", ghc_opts
    
    if mode == 'core':
        nofib_relative = os.path.join(*takesuffixwhile(lambda x: x != 'nofib', full_directory_path))
        
        output_root = os.path.join(investigation_root, 'results', 'code', variant, nofib_relative)
        print "Output to", output_root

        if not os.path.exists(output_root):
            os.makedirs(output_root)

        for source_path in glob.glob(os.path.join(current_directory, '*.hs')) + glob.glob(os.path.join(current_directory, '*.lhs')):
            source_file = os.path.basename(source_path)
            print "Compiling", source_file
    
            output_path = os.path.join(output_root, source_file)
            output_file = open(output_path, 'w')
            lines = os.popen(ghc + ' ' + ghc_opts + ' ' + source_path, 'r').readlines()
            output_file.writelines(lines)
            output_file.close()
        
            if do_split:
                print "Splitting"
                os.system('ghc-dump-split ' + output_path)
    elif mode == 'benchmark':
        output_path = os.path.join(investigation_root, 'results', variant + '.log')
        print "Output to", output_path
        
        command = 'make clean && make boot && HC="' + ghc + '" EXTRA_HC_OPTS="' + ghc_opts + '" make -k >& ' + output_path
        print "Running:", command
        os.system(command)
    else:
        usage(program)
        return 2

    return 0

if __name__ == "__main__":
   sys.exit(main(sys.argv[0], sys.argv[1:]))